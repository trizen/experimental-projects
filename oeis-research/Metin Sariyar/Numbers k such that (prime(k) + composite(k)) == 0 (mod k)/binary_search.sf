#!/usr/bin/ruby

# Numbers k such that (prime(k)+composite(k))/k is an integer, where prime(k) is the k-th prime.
# https://oeis.org/A329112

# Try to generate potential values of k, where k+r or k-r my be a term for some small r.

# 24 -> 1148520401
# 25 -> 2992553661
# 26 -> 7810355163
# 27 -> 20417009694
# 28 -> 53450012130
# 29 -> 140117566414
# 30 -> 367781396222
# 31 -> 966501096625
# 33 -> 6696270270399

#~ func prime(n) {
    #~ int(n * (log(n) + log(log(n)) - 1))
#~ }

#~ func composite(n) {
    #~ int(n + n/log(n) + n/(log(n)**2))
#~ }

func composite(n) is cached {
    n.composite
}

func prime(n) is cached {
    n.prime
    #Num(`./primecount -n #{n}`.strip)
}

say bsearch_le(1, 1e12, {|k|
    prime(k) + composite(k) / k <=> 31
})

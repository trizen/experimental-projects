#!/usr/bin/ruby

# a(n) is the smallest n-gonal number with exactly n distinct prime factors.
# https://oeis.org/A358862

# Known terms:
#   66, 44100, 11310, 103740, 3333330, 185040240, 15529888374, 626141842326, 21647593547580, 351877410344460, 82634328555218440

# PARI/GP program:
/*

omega_polygonals(A, B, n, k) = A=max(A, vecprod(primes(n))); (f(m, p, j) = my(list=List()); forprime(q=p, sqrtnint(B\m, j), my(v=m*q, r=nextprime(q+1)); while(v <= B, if(j==1, if(v>=A && ispolygonal(v,k), listput(list, v)), if(v*r <= B, list=concat(list, f(v, r, j-1)))); v *= q)); list); vecsort(Vec(f(1, 2, n)));
a(n, k=n) = if(n < 3, return()); my(x=vecprod(primes(n)), y=2*x); while(1, my(v=omega_polygonals(x, y, n, k)); if(#v >= 1, return(v[1])); x=y+1; y=2*x); \\ ~~~~

*/

func upper_bound(n, from = 2, upto = 2*from) {

    say "\n:: Searching an upper-bound for a(#{n})\n"

    loop {

        var count = n.omega_prime_count(from, upto)

        if (count > 0) {

            say "Sieving range: [#{from}, #{upto}]"
            say "This range contains: #{count.commify} elements\n"

            n.omega_primes_each(from, upto, {|v|
                if (v.is_polygonal(n)) {
                    say "a(#{n}) = #{v}"
                    return v
                }
            })
        }

        from = upto+1
        upto *= 2
    }
}

upper_bound(14)

__END__
a(14) = 2383985537862979050
a(15) = 239213805711830629680

#!/usr/bin/ruby

# a(n) is obtained by applying the map k -> prime(k) n times, starting at n.
# https://oeis.org/A058009

# Known terms:
#   2, 5, 31, 277, 5381, 87803, 2269733, 50728129, 1559861749, 64988430769, 2428095424619, 119543903707171, 5519908106212193, 248761474969923757

# Bounds:
#   13290767188588817611 < a(15) < 13393345062869460301

require('ntheory')

func prime_count(n) is cached {
    Num(`./primecount #{n}`.strip)
    #n.pi
    #n.prime_count_lower(n)
}

func nth_prime_bsearch(n) is cached {

    n == 0 && return 1      # not composite, but...
    n <= 0 && return NaN
    n == 1 && return 2

    var min = %S<ntheory>.nth_prime_lower(n)
    var max = %S<ntheory>.nth_prime_upper(n)

    var k = bsearch_le(min, max, {|k|
        prime_count(k) <=> n
    })

    while (!k.is_prime) {
        --k
    }

    return k
}

func nth_prime(n) is cached {

    if (n <= 216289611853439384) {
        return Num(`./primecount -n #{n}`.strip)
        #return  %S<ntheory>.nth_prime_lower(n)
        #return n.nth_prime
    }

    nth_prime_bsearch(n)
}

func a(n) is cached {
    var p = n
    n.times {
        p = nth_prime(p)
    }
    return p
}

for n in (1..30) {
    print(a(n), ", ")
}

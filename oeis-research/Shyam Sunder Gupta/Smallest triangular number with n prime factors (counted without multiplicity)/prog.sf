#!/usr/bin/ruby

# Smallest triangular number with n prime factors (counted without multiplicity).
# https://oeis.org/A358863

# Known terms:
#   1, 3, 6, 66, 210, 3570, 103740, 930930, 56812470, 1722580860, 32395433070, 265257422430, 91348974206490, 8923863379851420, 330196858581850260, 14193386885746698630, 2378522762792139793830, 351206814022419685159830, 28791787439593010836313310

# PARI/GP program:
/*

omega_polygonals(A, B, n, k) = A=max(A, vecprod(primes(n))); (f(m, p, j) = my(list=List()); forprime(q=p, sqrtnint(B\m, j), my(v=m*q, r=nextprime(q+1)); while(v <= B, if(j==1, if(v>=A && ispolygonal(v,k), listput(list, v)), if(v*r <= B, list=concat(list, f(v, r, j-1)))); v *= q)); list); vecsort(Vec(f(1, 2, n)));
a(n, k=3) = if(n == 0, return(1)); my(x=vecprod(primes(n)), y=2*x); while(1, my(v=omega_polygonals(x, y, n, k)); if(#v >= 1, return(v[1])); x=y+1; y=2*x); \\ ~~~~

*/

func upper_bound(n, k, from = 2, upto = 2*from) {

    say "\n:: Searching an upper-bound for a(#{n})\n"

    loop {

        var count = n.omega_prime_count(from, upto)

        if (count > 0) {

            say "Sieving range: [#{from}, #{upto}]"
            say "This range contains: #{count.commify} elements\n"

            n.omega_primes_each(from, upto, {|v|
                if (v.is_polygonal(k)) {
                    say "a(#{n}) = #{v}"
                    return v
                }
            })
        }

        from = upto+1
        upto *= 2
    }
}

upper_bound(19, 3)

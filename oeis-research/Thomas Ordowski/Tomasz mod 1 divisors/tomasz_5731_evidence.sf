#!/usr/bin/ruby

var k = 5731
var t = ((5**5731 - 1)/4)

var f = [
 12207031,
 98072964868468250849,
 1088503532840208536899,
 (5**521 - 1)/4,
 (5**5731 - 1)/4 / (5**521 - 1)/4 / 12207031,
 (5**5731 - 1)/4 / (5**521 - 1)/4 / 98072964868468250849,
 (5**5731 - 1)/4 / (5**521 - 1)/4 / 1088503532840208536899,
 (5**5731 - 1)/4 / (5**521 - 1)/4 / (1088503532840208536899 * 98072964868468250849),
 (5**5731 - 1)/4 / (5**521 - 1)/4 / (12207031 * 1088503532840208536899 * 98072964868468250849),
 (5**5731 - 1)/4 / (5**521 - 1)/4 / (12207031 * 1088503532840208536899),
 (5**5731 - 1)/4 / (5**521 - 1)/4 / (12207031 * 98072964868468250849),

]

say f.all {|d| d % k == 1 }
say f.all {|d| (t/d) % k == 1 }

for r in (1..f.len) {

    f.combinations(r, {|*a|
        var prod = a.prod
        if (t%prod == 0) {
            say "Testing #{prod}"
            assert(prod % k, 1)
            assert((t/prod) % k, 1)
        }

        assert(prod % k, 1)
    })
}

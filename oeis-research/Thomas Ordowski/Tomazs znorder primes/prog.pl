#!/usr/bin/perl

# Generate the generalized Hamming numbers bellow a certain limit, given a set of primes.

use 5.020;
use warnings;
use Math::GMPz;
use experimental qw(signatures);
use Math::AnyNum qw(bsearch_ge);
use ntheory qw(divisors vecsum primes divisor_sum valuation powmod is_prime);

use Memoize qw(memoize);
memoize('a');

sub check_valuation($n, $p) {

    if ($p == 2) {
        return (valuation($n, $p) < 7);
    }

    if ($p == 3) {
        return (valuation($n, $p) < 8);
    }

    if ($p == 5) {
         return (valuation($n, $p) < 7);
    }

    if ($p == 7) {
         return (valuation($n, $p) < 4);
    }

    if ($p == 13) {
         return (valuation($n, $p) < 2);
    }

    ($n % $p) != 0;
}

sub hamming_numbers ($limit, $primes) {

    my @h = (1);
    foreach my $p (@$primes) {

        say "Prime: $p";
        foreach my $n (@h) {
            if ($n * $p <= $limit and check_valuation($n, $p)) {
                push @h, $n * $p;
            }
        }
    }

    return \@h;
}

my $h = hamming_numbers(10**18, primes(41)); #[2, 3, 5, 7, 13, 17, 19, 47, 67]); #primes(67));

say "Found: ", scalar(@$h), " terms";

#my @nums = map{$_+1}sort {$a <=> $b}@$h;
@$h = sort {$a <=> $b} @$h;

foreach my $i(0..$#$h) {
    ++$h->[$i];
}

sub a ($n) {

    $n == 0 and return 1;

    my $t = a($n-1);

    my $from = bsearch_ge(0, $#$h, sub {
        $h->[$_] <=> $t
    });

    my $k = Math::GMPz->new(0);

     for my $i ($from..$#$h) {

         $h->[$i] > $t or next;

         Math::GMPz::Rmpz_set_ui($k, $h->[$i]);

        if (powmod(2, $k-1, $t*$k) == 1) {

            if (not is_prime($k)) {
                die "Found counter-example: $k";
            }

            #if ($t > 1) {
            #    say "result: ", ($k-1)/($t-1);
            #}

            return $k;
        }
    }
}

foreach my $n(1..100) {
    my $t = a($n) // last;
    $t || last;
    say "a($n) = ", $t;
}

__END__

a(1) = 3
a(2) = 5
a(3) = 13
a(4) = 37
a(5) = 73
a(6) = 109
a(7) = 181
a(8) = 541
a(9) = 1621
a(10) = 4861
a(11) = 9721
a(12) = 10531
a(13) = 17551
a(14) = 29251
a(15) = 87751
a(16) = 526501
a(17) = 3159001
a(18) = 5528251
a(19) = 11056501
a(20) = 44226001
a(21) = 49385701
a(22) = 98771401
a(23) = 172849951
a(24) = 345699901
a(25) = 352755001
a(26) = 564408001
a(27) = 634959001
a(28) = 793698751
a(29) = 795815281
a(30) = 1326358801
a(31) = 3979076401
a(32) = 4317721201

a(1) = 3
a(2) = 5
a(3) = 13
a(4) = 37
a(5) = 73
a(6) = 109
a(7) = 181
a(8) = 541
a(9) = 1621
a(10) = 4861
a(11) = 9721
a(12) = 10531
a(13) = 17551
a(14) = 29251
a(15) = 87751
a(16) = 526501
a(17) = 3159001
a(18) = 5528251
a(19) = 11056501
a(20) = 44226001
a(21) = 49385701
a(22) = 98771401
a(23) = 172849951
a(24) = 345699901
a(25) = 352755001
a(26) = 564408001
a(27) = 634959001
a(28) = 793698751
a(29) = 795815281
a(30) = 1326358801
a(31) = 3979076401
a(32) = 4317721201
a(33) = 5037341401
a(34) = 5317193701

a(1) = 3
a(2) = 5
a(3) = 13
a(4) = 37
a(5) = 73
a(6) = 109
a(7) = 181
a(8) = 541
a(9) = 1621
a(10) = 4861
a(11) = 9721
a(12) = 10531
a(13) = 17551
a(14) = 29251
a(15) = 87751
a(16) = 526501
a(17) = 3159001
a(18) = 5528251
a(19) = 11056501
a(20) = 44226001
a(21) = 49385701
a(22) = 98771401
a(23) = 172849951
a(24) = 345699901
a(25) = 352755001
a(26) = 564408001
a(27) = 634959001
a(28) = 793698751
a(29) = 795815281
a(30) = 1326358801
a(31) = 3979076401
a(32) = 4317721201
a(33) = 5037341401
a(34) = 5317193701
a(35) = 31903162201
a(36) = 55298814481
a(37) = 82948221721
a(38) = 89604560501

a(1) = 3
a(2) = 5
a(3) = 13
a(4) = 37
a(5) = 73
a(6) = 109
a(7) = 181
a(8) = 541
a(9) = 1621
a(10) = 4861
a(11) = 9721
a(12) = 10531
a(13) = 17551
a(14) = 29251
a(15) = 87751
a(16) = 526501
a(17) = 3159001
a(18) = 5528251
a(19) = 11056501
a(20) = 44226001
a(21) = 49385701
a(22) = 98771401
a(23) = 172849951
a(24) = 345699901
a(25) = 352755001
a(26) = 564408001
a(27) = 634959001
a(28) = 793698751
a(29) = 829679761
a(30) = 957322801
a(31) = 1244519641
a(32) = 1498032901
a(33) = 4494098701
a(34) = 5992131601
a(35) = 7989508801
a(36) = 11984263201
a(37) = 35952789601
a(38) = 44940987001
a(39) = 55926561601
a(40) = 58256835001
a(41) = 466054680001

a(1) = 3
a(2) = 5
a(3) = 13
a(4) = 37
a(5) = 73
a(6) = 109
a(7) = 181
a(8) = 541
a(9) = 1621
a(10) = 4861
a(11) = 9721
a(12) = 10531
a(13) = 17551
a(14) = 29251
a(15) = 87751
a(16) = 526501
a(17) = 3159001
a(18) = 5528251
a(19) = 11056501
a(20) = 44226001
a(21) = 49385701
a(22) = 98771401
a(23) = 172849951
a(24) = 345699901
a(25) = 352755001
a(26) = 564408001
a(27) = 634959001
a(28) = 793698751
a(29) = 795815281
a(30) = 1326358801
a(31) = 3979076401
a(32) = 4317721201
a(33) = 5037341401
a(34) = 5317193701
a(35) = 31903162201
a(36) = 46259585191
a(37) = 49887787951
a(38) = 66517050601

a(1) = 3
a(2) = 5
a(3) = 13
a(4) = 37
a(5) = 73
a(6) = 109
a(7) = 181
a(8) = 541
a(9) = 1621
a(10) = 4861
a(11) = 9721
a(12) = 10531
a(13) = 17551
a(14) = 29251
a(15) = 87751
a(16) = 526501
a(17) = 3159001
a(18) = 5528251
a(19) = 11056501
a(20) = 44226001
a(21) = 49385701
a(22) = 98771401
a(23) = 172849951
a(24) = 345699901
a(25) = 352755001
a(26) = 564408001
a(27) = 634959001
a(28) = 793698751
a(29) = 795815281
a(30) = 1326358801
a(31) = 3979076401
a(32) = 4317721201
a(33) = 5037341401
a(34) = 5317193701
a(35) = 31903162201
a(36) = 46259585191
a(37) = 49887787951
a(38) = 66517050601
a(39) = 166292626501
a(40) = 332585253001
a(41) = 383752215001

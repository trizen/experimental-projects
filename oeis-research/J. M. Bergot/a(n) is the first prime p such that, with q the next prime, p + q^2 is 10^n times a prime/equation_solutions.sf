#!/usr/bin/ruby

# a(n) is the first prime p such that, with q the next prime, p + q^2 is 10^n times a prime.
# https://oeis.org/A352848

# Known terms:
#   2, 409, 25819, 101119, 3796711, 4160119, 264073519, 2310648079, 165231073519, 9671986711

# Trying to solve the following equation:
#
#   p + (p+c)^2 = 10^n * t
#
# where n is fixed and c = {10, 22, 40, 52, 60, 70}

# a(7) <= 2310648079
# a(4) <= 1018890648079
# a(8) <= 2225520648079
# a(9) <= 2542620648079
# a(9) <= 2373701060119
# a(9) <= 5929131073519
# a(10) <= 18300671986711

func a(n, d=10, max=nil) {

    var seen = Set()
    var f = 10**n

    var X = Poly(1)
    var (a, b, c) = ((X+d)**2 + X -> coeffs.map { .tail }.flip...)

    for k in (1 .. 2e6) {

        var (x) = iquadratic_formula(a, b, -f*k + c)

        defined(max) && (f+x > max) && break

        if (f `divides` ((x+d)**2 + x)) {

            if (x.is_even) {
                say ":: Found even x = #{x}. Skipping..."
                next
            }

            say ":: Searching with x = #{x} and k = #{k}"

            for n in (0 .. 1e7) {

                var p = (f*n + x)
                #var t = (f * n**2 + (2*x + 1)*n + ((x*x + x + 8) / f))

                defined(max) && (p > max) && break

                p.is_prime || next
                (p+d).is_prime || next

                var u = (p + p.next_prime**2)

                u.remdiv(10).is_prime || next

                var v = u.valuation(10)

                if (!seen.has(v)) {
                    seen << v
                    say "a(#{v}) <= #{p}"
                }
            }
        }
    }

    return nil
}

for d in ([10, 22, 40, 52, 60, 70]) {
    say "Checking: d = #{d}"
    say a(7, d, 18300671986711)
}

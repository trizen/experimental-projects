#!/usr/bin/ruby

# a(n) is the smallest k such that psi(k) and phi(k) have same distinct prime factors when k is the product of n distinct primes (psi(k) = A001615(k) and phi(k) = A000010(k)), or 0 if no such k exists.
# https://oeis.org/A291138

# Known terms:
#   3, 14, 42, 210, 3570, 43890, 746130, 14804790, 281291010, 8720021310

#`(

# PARI/GP program:

generate(A, B, n) = A=max(A, vecprod(primes(n))); (f(m, p, j, phi=1, psi=1) = my(list=List()); my(s=sqrtnint(B\m, j)); if(j==1, forprime(q=max(p, ceil(A/m)), s, if(factorback(factor((q-1)*phi)[, 1]) == factorback(factor((q+1)*psi)[, 1]), listput(list, m*q))), forprime(q=p, s, my(t=m*q); list=concat(list, f(t, q+1, j-1, phi*(q-1), psi*(q+1))))); list); vecsort(Vec(f(1, 2, n)));
a(n) = my(x=vecprod(primes(n)), y=2*x); while(1, my(v=generate(x, y, n)); if(#v >= 1, return(v[1])); x=y+1; y=2*x); \\ ~~~~

)

func a(n, from = 2, upto = 2*from) {

   # say "\n:: Searching an upper-bound for a(#{n})\n"

    loop {

        var count = n.squarefree_almost_prime_count(from, upto)

        if (count > 0) {

           # say "Sieving range: [#{from}, #{upto}]"
          #  say "This range contains: #{count.commify} elements\n"

            n.squarefree_almost_primes_each(from, upto, {|v|
                 if (v.phi.rad == v.psi.rad) {
                    say "a(#{n}) = #{v}"
                    return v
                }
            })
        }

        from = upto+1
        upto *= 2
    }
}

for n in (1..100) {
    a(n)
}

__END__
1 3
2 14
3 42
4 210
5 3570
6 43890
7 746130
8 14804790
9 281291010
10 8720021310
11 278196808890
12 8624101075590
13 353588144099190
14 25104758231042490
15 2234323482562781610
16 129325924468711040070
17 9182140637278483844970
18 725389110345000223752630
19 51501592227099266198116170
20 3656613048124047900066248070
21 288872430801799784105233597530
22 25709646341360180785365790180170
23 2493835695111937536180481647476490
24 251877405206305691154228646395125490
25 27125450855732544581035098879601781730
26 2739670536428987002684544986839779954730
27 298624088470759583292615403565536015065570
28 33744521997195832912065540602905569702409410
29 3855864223146826898733707427756463067261777430
30 456529638100062423467334698816709452503896907890
31 52165987074953421112968327790117188836984586850470
32 6625080358519084481346977629344882982297042530009690
33 867885526966000067056454069444179670680912571431269390
34 120636088248274009320847115652740974224646847428946445210
35 16464656332071987272127990151425532532487592392622611597690
36 2276636446451684409902423258511902667950499176465934432578610

#!/usr/bin/ruby

# Number of Fermat pseudoprimes between 2^n and 2^(n+1) that are not Carmichael numbers.
# https://oeis.org/A252943

# Known terms:
#   0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 5, 10, 12, 14, 21, 31, 41, 64, 100, 127

# New terms:
#   0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 5, 10, 12, 14, 21, 31, 41, 64, 100, 127, 165, 216, 288, 397, 572, 723, 955, 1344, 1793, 2399, 3280, 4228, 5728, 7738, 10223, 13895, 18324, 24437, 33007, 43850, 58173, 77938, 104689, 139195, 187497, 252020, 337731, 452631, 606942, 815966, 1096679, 1475359, 1989842, 2678509, 3612496, 4873878, 6581371, 8899450, 12032640, 16287224, 22056473, 29898324

# OEIS data:
#   0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 5, 10, 12, 14, 21, 31, 41, 64, 100, 127, 165, 216, 288, 397, 572, 723, 955, 1344, 1793, 2399, 3280, 4228, 5728, 7738, 10223, 13895, 18324, 24437, 33007, 43850, 58173, 77938, 104689, 139195, 187497, 252020, 337731, 452631, 606942

#`(

# Command used to find the new terms (slow):

zstdcat psps-below-2-to-64.txt.zst | perl -Mntheory=:all -E 'my $count = 0; my $n = 4; while (<>) { chomp; while ($_ > $n) { say $count; $count = 0; $n <<= 1 }; ++$count if !is_carmichael($_) }'

# Alternative command with support for big integers (fast):

zstdcat psps-below-2-to-64.txt.zst | perl -MMath::GMPz -Mntheory=:all -E 'my %carmichael; foreach my $file("carmichael_2^64.txt", "carmichael_1e18.txt") { open my $fh, "<:raw", $file or die; chomp(my @list = <$fh>); @carmichael{@list} = (); }; my $count = 0; my $n = Math::GMPz->new(4); while (<>) { chomp; while ($_ > $n) { say $count; $count = 0; $n <<= 1 }; ++$count if !exists($carmichael{$_}) }; say $count'

)

for n in (1..100) {

    var lo = 2**n
    var hi = 2**(n+1)

    var count = 0

    for k in (1..Inf) {
        break if (k.pn_primorial > lo)
        count += k.fermat_psp(2, lo, hi).count { !.is_carmichael }
    }

    say "a(#{n}) = #{count}"
}

__END__
a(1) = 0
a(2) = 0
a(3) = 0
a(4) = 0
a(5) = 0
a(6) = 0
a(7) = 0
a(8) = 1
a(9) = 1
a(10) = 3
a(11) = 3
a(12) = 5
a(13) = 10
a(14) = 12
a(15) = 14
a(16) = 21
a(17) = 31
a(18) = 41
a(19) = 64
a(20) = 100
a(21) = 127
a(22) = 165
a(23) = 216
a(24) = 288
a(25) = 397
a(26) = 572
a(27) = 723
a(28) = 955

#!/usr/bin/perl

# Least number m > 1 such that A000203(x)*x = m has exactly n solutions.
# https://oeis.org/A212490

# a(6) <= 7089671638182002688000,
# a(7) <= 106345074572730040320,
# a(9) <= 1826980530660612389572800675840,

use 5.020;
use warnings;

use experimental qw(signatures);

use Math::GMPz;
use ntheory qw(:all);
#use Math::AnyNum qw(:overload);

sub check_valuation ($n, $p) {

    if ($p == 2) {
        return 1;
    }

    if ($p == 3 or $p == 5 or $p == 7 or $p == 13) {
        return valuation($n, $p) < 10;
    }

    #valuation($n, $p) < 1;
    Math::Prime::Util::GMP::modint($n, $p) != 0;


    #~ if ($p == 2) {
        #~ return valuation($n, $p) < 22;
    #~ }

    #~ if ($p == 3) {
        #~ return valuation($n, $p) < 6;
    #~ }

    #~ if ($p == 5) {
        #~ return valuation($n, $p) < 4;
    #~ }

    #~ if ($p == 7) {
        #~ return valuation($n, $p) < 5;
    #~ }

    #~ if (
       #~ # $p == 11
    #~ # $p == 13
       #~ $p == 19
    #~ or $p == 127
    #~ ) {
        #~ return valuation($n, $p) < 2;
    #~ }

    #~ ($n % $p) != 0;
    #~ valuation($n, $p) < 2;
}

sub smooth_numbers ($limit, $primes) {

    my @h = (1);
    foreach my $p (@$primes) {

        say "Prime: $p";

        foreach my $n (@h) {
            if ($n * $p < $limit and check_valuation($n, $p)) {
                push @h, Math::Prime::Util::GMP::mulint($n, $p);
            }
        }
    }

    return \@h;
}

#
# Example for finding numbers `m` such that:
#     sigma(m) * phi(m) = n^k
# for some `n` and `k`, with `n > 1` and `k > 1`.
#
# See also: https://oeis.org/A306724
#

sub isok ($n) {
    my $count = 0;
    #map { divisor_sum($_, 0) * $_ ==  } divisors($n)
    my $s = Math::Prime::Util::GMP::sqrtint($n);
    foreach my $d (Math::Prime::Util::GMP::divisors($n)) {
        last if ($d > $s);
        if (Math::Prime::Util::GMP::mulint(Math::Prime::Util::GMP::sigma($d), $d) eq $n) {
            ++$count;
        }
    }
    $count;
}

#~ foreach my $n(1..1e7) {
    #~ if (isok(2709159936*$n) >= 5) {
        #~ say "Found: ", 2709159936*$n, ' with ', isok(2709159936*$n);
    #~ }
#~ }

#~ my %table;

#~ foreach my $n (1..1e7) {

   #~ # $n % 10 == 0 or next;

    #~ my $k = mulint($n, divisor_sum($n));

    #~ push @{$table{$k}}, $n;

    #~ if (scalar(@{$table{$k}}) >= 4) {

        #~ my $p = isok($k);

        #~ say "[$p] Found: $k";

        #~ if ($p >= 6) {
            #~ die "Found an upper-bound for a($p) -> $k";
        #~ }

        #~ if ($p == 6 and $k < 1508867287200000) {
            #~ die "Found a smaller bound for a(6) -> $k";
        #~ }

        #~ if ($p == 7 and $k < 33195080318400000) {
            #~ die "Found a smaller bound for a(7) -> $k";
        #~ }
    #~ }
#~ }

#~ __END__

my @smooth_primes;

foreach my $p (@{primes(127)}) {

    if ($p == 2) {
        push @smooth_primes, $p;
        next;
    }

    my @f1 = factor($p - 1);
    my @f2 = factor($p + 1);

    if ( $f2[-1] <= 7) {
        push @smooth_primes, $p;
    }
}

use List::Util qw(uniq);

#my $h = smooth_numbers(10**15, [2, 7, 11, 13, 17, 19, 29, 31, 41, 71, 97, 127, 251, 449, 4801]);
#my $h = smooth_numbers(10**12, [2, 3, 5, 7, 13, 17, 19, 29, 31, 61, 89, 107, 127, 521]);
my $h = smooth_numbers(~0, [sort {$a <=> $b} uniq(

#2, 3, 5, 7, 13, 31, 127
#2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521
#@{primes(40)}, 2, 3, 5, 7, 13, 31, 127

#13, 47, 631, 10303, 1609669, 991, 601, 173, 5167, 157, 5419, 313, 19, 53, 17293, 73, 14281, 4801, 18041, 3541, 11489, 59, 79, 61, 107, 1801, 197, 419, 8011, 3169, 137, 12207031, 367, 31, 83, 17, 193, 43, 103, 5, 7, 127, 19531, 3571, 3221, 89, 131, 3, 30941, 521, 167, 109, 2, 199, 139, 307, 71, 101, 191, 163, 1723, 305175781, 1613, 449, 37, 11, 28393, 5229043, 2411, 859, 113, 149, 29, 571, 151, 1741, 466344409, 262209281, 41, 829, 23, 409, 181, 1231, 5113, 67, 179, 97
#829, 163, 7, 313, 3, 73, 157, 5229043, 103, 5, 28393, 409, 151, 5419, 53, 19531, 19, 67, 47, 11, 8011, 107, 1741, 149, 859, 97, 3169, 29, 991, 11489, 14281, 83, 37, 3221, 466344409, 137, 30941, 127, 167, 4801, 173, 43, 18041, 101, 199, 3571, 131, 2411, 13, 262209281, 193, 1801, 113, 1609669, 1723, 419, 5113, 179, 59, 601, 5167, 631, 571, 79, 449, 71, 17293, 31, 1613, 10303, 12207031, 521, 1231, 181, 109, 307, 191, 139, 3541, 41, 61, 17, 197, 23, 367, 89, 2, 305175781

#7, 17, 71, 251, 4801, 29, 2, 449, 13, 19, 11, 31, 41, 97, 127

#~ 2, 3, 5, 7, 11, 35149, 37, 739, 73, 379, 13, 267139, 19, 98419, 246049, 499, 50539, 126349, 349, 139, 26713, 984199, 6678499, 29, 21089, 149, 73999, 227, 443, 18049, 1109, 7219, 8014199, 2460499, 105449, 569, 559549, 505399, 1263499, 1549, 3499, 151, 113, 2293, 1063, 1399, 2659, 5179, 11779, 4007099, 59, 41, 28499, 19949, 4217, 1499, 20703349, 57349, 1082999, 758099, 61, 14249, 2887, 27749, 2999, 5623, 435859, 56999, 147629, 10896499, 2099, 56099399, 199, 229399, 46749499, 1566739, 828133, 80141, 305101, 433, 40070999, 4339, 22381, 16057, 12422009, 797, 1049, 1553, 56239, 199499, 129499, 6537899, 42179, 419, 66499, 31, 1999, 29599, 15161, 7580999, 83, 653789, 335729, 929, 13763, 15199, 1121987, 79, 77699, 39367, 15959, 31079, 30510199, 207033499, 801419, 7627549, 10685599, 747991, 160579, 64231, 43399, 32983, 3533, 4649, 124220099, 270749, 172049, 619, 3936799, 294499, 2021599, 13999, 1068559, 23, 137639, 89527, 43319, 427423, 14024849, 607, 28879, 20719, 8287, 10639, 599, 887, 11399, 5609939, 239, 16871, 47, 10499, 8663, 562399, 443999, 11551, 479, 3916849, 16871999, 62110049, 6199, 47119, 3989, 160283999, 1516199, 991, 295259, 3191, 112198799, 517999, 388499, 68819, 46499, 35339, 5796937999, 168719, 155399, 60647, 167, 6411359, 3032399, 911, 17327, 80863, 30323, 63839, 176699, 17669, 223, 13250143, 17359, 207199, 173599, 6714599, 747991999, 27527, 496880399, 523031, 76275499, 49688039, 743, 8952799, 1487, 371999, 37199, 134291, 108499, 86954069, 2173851749, 1301, 240869, 65099, 3719, 1449234499, 22882649, 6184499, 470021, 235010999, 114413249, 839, 6021749, 494759, 59051, 8393249, 621100499, 1895249, 173908139, 1220407999, 221999, 14879, 24799, 67145999, 9937607, 141359, 4968803999, 4700219, 130199, 162749, 29525999, 4817399, 1181039, 41999, 3359, 4881631, 2506783, 1979039, 236207, 260399, 4464049, 16046449, 9397, 44449, 178561, 593718649, 63499, 93979, 48259, 124993399, 848169499, 33926779, 12499339, 6418579, 916939, 844549, 37591, 2349499, 704849, 2539, 761, 13754099, 9169399, 1523, 3524249, 714247, 289559, 1777, 240696749, 666749, 506729, 1249933999, 7238999, 144779, 133349, 2374874599, 5333, 10667, 2026919, 550163, 291337, 1065942749, 2952749, 6079, 127, 11839, 4274239, 462079, 89983, 1279, 118399, 7142479, 10159, 71424799, 772159, 101599, 14671039, 40639, 3759199, 114279679, 3088639, 12799

#2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 181, 307, 2411, 3221, 14281, 30941, 1609669, 5229043

#2, 3, 7, 31, 127, 8191, 131071, 524287, 2147483647,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 7, 13, 31, 127,

#@{primes(100)},

2, 3, 7, 31, 19, 29, 43, 127, 8191, 131071,

#2, 3, 7, 11, 13, 19, 23, 31,
#@{primes(60)},

#127, 8191, 131071, 524287, 2147483647, 2305843009213693951

#~ 14281, 181, 18041, 619, 1487, 127, 1231, 479, 5229043, 139, 367, 11, 443, 599, 1523, 2411, 197, 887, 7, 223, 83, 409, 269, 1279, 5, 1741, 991, 1553, 1301, 466344409, 29, 3169, 113, 499, 601, 107, 1723, 157, 743, 1399, 503, 151, 31, 167, 839, 1063, 607, 101, 4801, 191, 3541, 449, 3221, 47, 313, 307, 61, 28393, 1777, 59, 79, 13, 2, 431, 569, 12207031, 89, 631, 137, 349, 23, 179, 797, 557, 97, 5167, 761, 41, 67, 163, 109, 233, 305175781, 37, 1109, 3571, 199, 251, 5419, 262209281, 739, 1439, 71, 11489, 311, 17293, 863, 467, 19531, 829, 173, 10303, 571, 8011, 73, 53, 1801, 719, 3, 379, 149, 521, 433, 19, 17, 1609669, 911, 239, 701, 103, 929, 859, 1259, 1499, 1049, 193, 30941, 43, 227, 1613, 359, 5113, 8191, 1549, 419, 131

#~ 2, 3, 5, 1249, 349, 3499, 7499, 13, 4999, 13999, 19, 1499, 23, 59, 499, 149, 199, 139, 41, 11, 7, 26249, 29, 10499, 1399, 167, 1049, 599, 419, 49999, 31249, 18749,

#~ 2, 3, 11, 13, 5, 7, 47, 83, 41, 23, 61, 433, 223, 1487, 167, 191, 991, 31, 743, 1301, 1523, 761, 1777, 10667, 19, 5333, 7873, 55117, 59, 89, 79, 71, 29, 839, 17, 719, 503, 419, 3719, 359, 251, 139, 2789, 619, 5039, 239, 929, 179, 3359, 4339, 2879, 557, 14879, 1439, 479, 11159, 6719, 4463, 17359, 208319, 1259, 31247, 10079, 2539, 22859, 10159, 26669, 213359, 16001, 160019, 32003, 701, 53, 233, 467, 311, 103, 1871, 7253, 2417, 58031, 7487, 107, 863, 236219, 431, 18287, 3301, 39623, 29717, 6857, 178307, 89153

#2, 3, 5, 7, 11, 13, 17, 19, 23, 31, 37, 41, 43, 73, 89, 127, 151, 257, 337, 8191, 131071, 524287
#2, 3, 5, 7, 13, 17, 19, 29, 31, 61, 89, 107, 127, 521
#2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 71, 97, 127, 251, 449, 4801

#~ 2, 3, 5, 7, 13, 31, 37, 73, 127,
#~ 2, 3, 5, 7, 13, 31, 127,
#~ 2, 3, 5, 7, 11, 13, 31, 127,
#~ 2, 3, 5, 7, 13, 17, 31, 127,
#~ 2, 3, 5, 7, 13, 23, 31, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 37, 127,
#~ 2, 3, 5, 7, 11, 13, 31, 43, 127,
#~ 2, 3, 5, 7, 13, 31, 37, 73, 127,
#~ 2, 3, 5, 7, 13, 31, 127,
#~ 2, 3, 5, 7, 11, 13, 31, 127,
#~ 2, 3, 5, 7, 13, 17, 31, 127,
#~ 2, 3, 5, 7, 13, 23, 31, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 37, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 127,
#~ 2, 3, 5, 7, 13, 31, 127,
#~ 2, 3, 5, 7, 13, 17, 31, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 127,
#~ 2, 3, 5, 7, 13, 29, 31, 127,
#~ 2, 3, 5, 7, 13, 31, 89, 127,
#~ 2, 3, 5, 7, 13, 31, 107, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 127,
#~ 2, 3, 5, 7, 11, 13, 31, 43, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 37, 127,
#~ 2, 3, 5, 7, 13, 23, 31, 127,
#~ 2, 3, 5, 7, 13, 31, 37, 73, 127,
#~ 2, 3, 5, 7, 13, 31, 89, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 127,

#17, 3, 11, 97, 521, 107, 61, 29, 127, 13, 23, 19, 79, 89, 43, 73, 5, 4801, 53, 7, 37, 31, 2

#73, 13, 79, 2, 19, 127, 23, 17, 29, 31, 89, 7, 43, 107, 37, 11, 3, 5
#@{primes(127)}
#~ 2, 3, 5, 7, 13, 31, 127,
#~ 2, 3, 5, 7, 13, 19, 31, 127,
#~ 2, 3, 5, 7, 13, 31, 89, 127,
#~ 2, 3, 5, 7, 13, 31, 37, 73, 127,

)]);
#my $h = smooth_numbers(10**12, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 53, 79, 97]);

say "\nFound: ", scalar(@$h), " terms";

my %table;

#@$h = sort {$a <=> $b} uniq(map{lcm($_, 2709159936)}  @$h);

@$h = sort { $a<=> $b} @$h;

foreach my $n (@$h) {

   # $n % 10 == 0 or next;

   $n % 2 == 0 or next;

    my $k = Math::Prime::Util::GMP::mulint(Math::Prime::Util::GMP::sigma($n), $n);

    if (++$table{$k} >= 6) {

        my $p = isok($k);

        #say "[$p] Found: $k";

        if ($p >= 6) {
            say "Found an upper-bound for a($p) <= $k = ", join(' * ', map { "$_->[0]^$_->[1]" } factor_exp($k));
        }

        #~ if ($p == 6 and $k < 1508867287200000) {
            #~ die "Found a smaller bound for a(6) -> $k";
        #~ }

        #~ if ($p == 7 and $k < 33195080318400000) {
            #~ die "Found a smaller bound for a(7) -> $k";
        #~ }
    }
}

#~ foreach my $n (@$h) {

   #~ #     next if ($n < 1907135140680000000);

    #~ #($n % 10) == 0 or next;
    #~ #($n % 23) == 0 or next;

    #~ #valuation($n, 2) >= 8 or next;
    #~ valuation($n, 5) >= 5 or next;

    #~ my $p = isok($n);

    #~ if ($p >= 5) {

        #~ say "[$p] Testing: $n";

        #~ if ($p >= 6) {
            #~ die "a($p) = $n -> ", join(' * ', map { "$_->[0]^$_->[1]" } factor_exp($n));
            #~ push @{$table{$p}}, $n;
        #~ }
    #~ }
#~ }

#~ say '';

#~ foreach my $k (sort { $a <=> $b } keys %table) {
    #~ say "a($k) <= ", vecmin(@{$table{$k}});
#~ }

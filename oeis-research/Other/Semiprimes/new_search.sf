#!/usr/bin/ruby

# Numbers n such that n*9^n-1 is semiprime.
# https://oeis.org/A242340
# 2, 3, 6, 8, 11, 18, 28, 38, 48, 168, 254, 274, 310, 430
# a(10)-a(14) from ~~~~
# a(15) >= 512. - ~~~~
# http://factordb.com/index.php?query=9%5E512*512-1

# Numbers n such that n*8^n+1 is semiprime.
# https://oeis.org/A242271
# 1, 2, 3, 9, 24, 32, 35, 51, 75, 234, 243, 392, 417, 472
# a(10)-a(14) from ~~~~
# a(15) >= 483. - ~~~~
# http://factordb.com/index.php?query=8%5E483*483%2B1

# Numbers n such that n*9^n+1 is semiprime.
# https://oeis.org/A242272
# 1, 8, 12, 16, 20, 50, 208, 254, 282, 342, 350, 386
# a(7)-a(12) from ~~~~
# a(13) >= 512. - ~~~~
# http://factordb.com/index.php?query=9%5E512*512%2B1

# Numbers n such that (2^n-n+1)*2^n+1 is a semiprime.
# https://oeis.org/A268110
# 3, 4, 6, 9, 10, 15, 19, 22, 26, 34, 47, 55, 67, 69, 72, 92, 100, 117, 160
# a(18)-a(19) from ~~~~

# Numbers n such that n*5^n-1 is semiprime.
# https://oeis.org/A242336
# 1, 2, 6, 12, 15, 19, 20, 26, 50, 55, 66, 68, 96, 99, 150, 166, 228, 459
# a(18) from ~~~~
# a(19) >= 534. - ~~~~
# http://factordb.com/index.php?query=534*5%5E534-1

# Numbers n such that n*6^n-1 is semiprime.
# https://oeis.org/A242337
# 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 25, 32, 35, 38, 45, 51, 54, 57, 68, 72, 82, 97, 110, 138, 155, 234, 254
# a(32) >= 423. - ~~~~
# http://factordb.com/index.php?query=423*6%5E423-1

# Numbers n such that 7^n - n is a semiprime.
# https://oeis.org/A252660
# 1, 20, 26, 32, 54, 162, 204
# a(7) from ~~~~
# a(8) >= 384.

# Numbers n such that 3^n-2 is a semiprime.
# https://oeis.org/A119739
# 1, 3, 31, 47, 83, 1255
# a(7) >= 7763.

for n in (366+1 .. 1e6) {
    say "Testing: #{n}"
    if (is_semiprime(7**n - n)) {
    #if (is_semiprime( (2**n - n + 1) * 2**n + 1)) {
        die "Found: #{n}"
        #print(n, ", ")
    }
}


__END__
use 5.014;
use ntheory qw(:all);

local $| = 1;
foreach my $n(1..1e6) {
    if (nth_semiprime($n) % $n == 3) {
        print($n, ", ");
    }
}

#say nth_semiprime(58155568)% 58155568;

__END__

func find_smallest(n) {
    var t = 2*n!
    1..1e6 -> lazy.grep{.is_prime}.map{|p| t*p + p**2 }.first { .is_semiprime }
}

for k in(1..100) {
    print(find_smallest(k), ", ")
}

#!/usr/bin/ruby



func f(n) {
    #return 0 if (n <= 1)
    #var f = factor(n)
    #f[-1] - f[0]
    return 0 if n.is_square

    var d = n.divisors
    d[(1+d.end)>>1] - d[d.end >> 1]
}

func g(n) {
    var k = 0
    while (n != 0) {
        n = f(n)
        ++k
    }
    k
}

func a(n) is cached {
    return 1 if (n == 1)

    var t = a(n-1)
    for k in (1..Inf) {
        var x = (k * (k + t))
        if (g(x) == n) {
            return x
        }
    }
}

#say 20.of { a(_+1) }
for k in (1..30) {
    say [k, a(k), a(k).ilog10]
}

__END__
for n in (1..20) {
    for k in (1..Inf) {
        if (g(k) == n) {
            say k
            break
        }
    }
}

#say 80.of { g(_) }

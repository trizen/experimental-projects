#!/usr/bin/ruby

# a(n) is the smallest Fermat pseudoprime to base 2 such that gpf(p-1) = prime(n) for all prime factors p of a(n).

# a(1)  = 4369
# a(2)  = 1387
# a(3)  = 341
# a(4)  = 3277
# a(5)  = 2047
# a(6)  = 8321
# a(7)  = 31621
# a(8)  = 104653
# a(9)  = 280601
# a(10) = 13747

# This program generates upper-bound for a(n).

func a(n) {
    var p = prime(n)

    for z in (2..100) {

        var arr = []

        for k in (2 .. 2**z) {
            var r = (k*p + 1)
            if (r.is_prime && (r.dec.gpf == p)) {
                arr << r
            }
        }

        var C = arr.combinations(2).map{.prod}.sort.first{ .is_fermat_pseudoprime(2) }
        return C if defined(C)
    }
}

for n in (1..100) {
    say [n, a(n)]
}

__END__
[1, 4369]
[2, 1387]
[3, 341]
[4, 3277]
[5, 2047]
[6, 8321]
[7, 31621]
[8, 104653]
[9, 280601]
[10, 13747]
[11, 2081713]
[12, 88357]
[13, 8902741]
[14, 741751]
[15, 665333]
[16, 2205967]
[17, 2008597]
[18, 1252697]
[19, 3235699]
[20, 1293337]
[21, 513629]
[22, 8095447]
[23, 83333]
[24, 2284453]
[25, 604117]
[26, 238001653]
[27, 1530787]
[28, 13747361]
[29, 3568661]
[30, 769757]
[31, 6973063]
[32, 275887]
[33, 12854437]
[34, 16705021]
[35, 2134277]
[36, 16435747]
[37, 21306157]
[38, 6386993]
[39, 128536561]
[40, 1441091]
[41, 514447]
[42, 3542533]
[43, 364857751]
[44, 2387797]
[45, 100618933]
[46, 28527049]
[47, 70541099]
[48, 35820937]
[49, 104524421]
[50, 30219757]
[51, 653333]
[52, 916327]
[53, 6278533]
[54, 54449431]
[55, 713383171]
[56, 37376509]
[57, 6952037]
[58, 56420033]
[59, 235742513]
[60, 284301751]
[61, 11541307]
[62, 61832377]
[63, 9056501]
[64, 55729957]
[65, 213228121]
[66, 271763467]
[67, 84164033]
[68, 110413333]
[69, 46256489]
[70, 1262991913]
[71, 2296894753]
[72, 928040131]
[73, 27491237]
[74, 45100177]
[75, 344776301]
[76, 63388033]
[77, 1452759401]
[78, 15139199]
[79, 69485281]
[80, 8036033]
[81, 4922413]
[82, 1914303841]
[83, 2976487]
[84, 9006401]
[85, 242860069]
[86, 43224397]
[87, 51627817]
[88, 563947141]
[89, 326469137]
[90, 61754941]
[91, 348989101]
[92, 66096253]
[93, 15188557]
[94, 867965251]
[95, 87694261]
[96, 36448387]
[97, 422928101]
[98, 4173838327]
[99, 78795181]
[100, 505798213]

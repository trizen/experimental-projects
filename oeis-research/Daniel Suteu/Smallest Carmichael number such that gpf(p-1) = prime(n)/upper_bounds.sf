#!/usr/bin/ruby

# a(n) is the smallest Carmichael number such that gpf(p-1) = prime(n) for all prime factors p of a(n), or 0 if no such number exists.

# a(2) = 1729
# a(3) = 252601
# a(4) = 1152271
# a(5) = 1615681
# a(6) = 4335241
# a(7) = 172947529

# This program generates upper-bounds for a(n).

func a(n) {
    var p = prime(n)

    for z in (2..100) {

        var arr = []

        for k in (1 .. 2**z) {
            var r = (2*k*p + 1)
            if (r.is_prime && (r.dec.gpf == p)) {
                arr << r
            }
        }

        var C = arr.combinations(3).map{.prod}.sort.first{.is_carmichael}
        return C if defined(C)
    }
}

if (ARGV) {
    say a(ARGV[0].to_i)
    return true
}

for n in (2..100) {
    say [n, a(n)]
}

__END__
[2, 1729]
[3, 252601]
[4, 1152271]
[5, 1615681]
[6, 4335241]
[7, 172947529]
[8, 214852609]
[9, 79624621]
[10, 178837201]
[11, 775368901]
[12, 686059921]
[13, 985052881]
[14, 5781222721]
[15, 10277275681]
[16, 84350561]
[17, 5255104513]
[18, 492559141]
[19, 74340674101]
[20, 9293756581]
[21, 1200778753]
[22, 129971289169]
[23, 2230305949]
[24, 851703301]
[25, 8714965001]
[26, 6693621481]
[27, 3313196881]
[28, 16260021568801]
[29, 1003024857409]
[30, 2436691321]
[31, 90650430841]
[32, 542497201]
[33, 8346731851]
[34, 187843114369]
[35, 171615172321]
[36, 114012594697]
[37, 401397353281]
[38, 496950008129]
[39, 3091175755489]
[40, 191582622001]
[41, 88183003921]
[42, 89760310921]
[43, 516441599521]
[44, 1444635316441]
[45, 2246625745201]
[46, 53038112821]
[47, 15852629599249]
[48, 1797002211241]
[49, 14327437972681]
[50, 545009067541]
[51, 49237316749]
[52, 83946864769]
[53, 18500666251]
[54, 54519328481]
[55, 48336382727569]
[56, 15210276812821]
[57, 207222530621]
[58, 60246018673]
[59, 68926289491]
[60, 96464987884231]
[61, 6032781519073]
[62, 97887454669]
[63, 155706912481]
[64, 779999961061]
[65, 835085057941]
[66, 37371065373211]
[67, 191614761361]
[68, 110296864801]
[69, 469593692569]
[70, 116965170676481]
[71, 124711042468951]
[72, 174590053194769]
[73, 11109642966241]
[74, 118069613866751]
[75, 15239647744441]
[76, 24977268314209]
[77, 113026134157201]
[78, 40144845106081]
[79, 585210826621]
[80, 210359235841]
[81, 7873995921247]
[82, 82932179259511]
[83, 808025490721]
[84, 155999871721]
[85, 1299563648037601]
[86, 635075174497]
[87, 3711846239473]
[88, 1401992832580801]
[89, 38528364050689]
[90, 4460497633489]
[91, 55003376283001]
[92, 675518387329]
[93, 654705882710881]
[94, 34138047673]
[95, 14351225648761]
[96, 342267565249]
[97, 606244450001]
[98, 1200934753547257]
[99, 29667646934281]
[100, 73881755325361]

#!/usr/bin/perl

# Daniel "Trizen" È˜uteu
# Date: 27 June 2019
# https://github.com/trizen

# Print the n-th highly composite number, using data generated by Achim Flammenkamp.

# See also:
#   https://oeis.org/A321995 -- Indices of highly composite numbers A002182 which are between a twin prime pair.
#   https://oeis.org/A108951 -- Completely multiplicative with a(p) = p# for prime p, where x# is the primorial A034386(x).
#   https://oeis.org/A002182 -- Highly composite numbers, definition (1): where d(n), the number of divisors of n (A000005), increases to a record.

use 5.020;
use strict;
use warnings;

use Math::GMPz;
use ntheory qw(:all);
use IO::Uncompress::Bunzip2;
use experimental qw(signatures declared_refs);

local $| = 1;
prime_precalc(1e7);

# "HCN.bz2" was generated by Achim Flammenkamp, and is available at:
#   http://wwwhomes.uni-bielefeld.de/achim/HCN.bz2
# "HCN_primorial_deflated.txt.bz2" is a primorial deflation of each highly composite number H(n) from "HCN.bz2", such that A108951(A181815(H(n))) = H(n).
my $z = IO::Uncompress::Bunzip2->new("HCN_primorial_deflated.txt.bz2");

my $from = shift(@ARGV) // die "usage: perl $0 [from] [to=from]\n";
my $to   = shift(@ARGV) // $from;

if ($from < 0) {
    die "error: $from must be a positive integer\n";
}

if ($to < $from) {
    die "error: $to must be >= $from\n";
}

sub primorial_inflation ($n) {
    state %primorial;

    my $tmp  = Math::GMPz->new(1);
    my $prod = Math::GMPz->new(1);

    foreach my \@pp(factor_exp($n)) {
        my ($p, $e) = @pp;

        my $prim = $primorial{$p} //= do {
            my $z = Math::GMPz::Rmpz_init_nobless();
            Math::GMPz::Rmpz_primorial_ui($z, $p);
            $z;
        };

        if ($e > 1) {
            Math::GMPz::Rmpz_pow_ui($tmp, $prim, $e);
            Math::GMPz::Rmpz_mul($prod, $prod, $tmp);
        }
        else {
            Math::GMPz::Rmpz_mul($prod, $prod, $prim);
        }
    }

    return $prod;
}

while (defined(my $line = $z->getline())) {

    if ($. < $from) {
        next;
    }

    chomp($line);
    my $hcn = primorial_inflation($line);

    say "$. $hcn";
    last if $. >= $to;
}

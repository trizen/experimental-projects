#!/usr/bin/ruby

# Recursively generate Fermat pseudoprimes to base 2, using primes of the form k*z + 1,
# where z is the multimplicative order: znorder(2, n), where n is a Fermat pseudoprime to base 2.

var seen = Set()

func generate_fermat_from_znorder(n) is cached {

    var z = znorder(2, n)

    z < 1e8 || return nil

    for k in (1..1000) {
        var p = (z*k + 1)

        p.is_prime || next
        n.is_div(p) && next

        var t = n*p

        if (t.is_psp && !seen.has(t)) {
            say t
            seen << t
            __FUNC__(t)
        }
    }

    return nil
}

[
18705
2113665
2882265
81722145
9234602385
19154790699045
43913624518905
56123513337585
162522591775545
221776809518265
3274782926266545
4788772759754985
38353281032877674865
2638294879881771254145
24773130788808935997465
429388072625313108651345
633708839387221385771985
4426632427184293146004185
30289748358904212366572385
728017010426459878356936705
34742187522900518220477982065
296874628838164374175009735905
282385466973939051351462060010785
303874597856107607075523212740305
95232935093163427870007414104051665
3470207934739664512679701940114447720865
35681625351759414447784656906886402710161726145
18324199296528369643710689094829325758885303308048705
3521782835397676946933688469202532605577443098683804760065
4480869812756224982980361246336523683775981809514868335105

].each {|n|
    generate_fermat_from_znorder(n)
}

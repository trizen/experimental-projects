#!/usr/bin/ruby

# Generate odd Lucas-cyclic numbers that are almost abundant.
# These are terms of: https://oeis.org/A255602

var min = Inf

func lambda_primes(L,n) {
    L.divisors.map { .dec }.count { .is_odd && !.divides(L) && .is_prime && is_coprime(_,n) }
}

func f(n, p) {

    n.is_coprime(n.psi) || return nil

    var ab = n.abundancy
    #if (n.is_abundant) {
    if (ab>1.9853 && ab<=2) {

        var c = lambda_primes(n.factor.lcm{.inc}, n)

        if (c < min) {
            min = c
            say [min, n]
        }
    }

    var q = p.next_prime

    if (q.inc.is_smooth(19)) {
        f(n*q, q)
    }

    f(n, q)
}

say f(5,5)

__END__
[13215, 133587134354128212088756948973033224795]
[9383, 7328847258486784859958918365033197316555964147055423695173993617579342855356890560814771346930172647499897149992536473935118618393020795560809966220078889663001741651]
[9382, 114861505433458181432546538473240881463566006761020100941584758221082430162080231546816765372188895788509749563698250788276110045385188975454266891925379887763318076961177544577]
[3731, 106653733772365052643166285665180547235]
[5181, 119024709829745330011481322067838705]
[23694, 127466063752826626324435698484540540558295]
[2058, 31620761143378686130685837465]
[432, 38030534297754067685]
[72, 430105139695]
[253, 3145358886589535]

[24, 3145358886589535]
[23, 336553400865080245]
[22, 38030534297754067685]

[27, 7367637346407233868449800129345]
[26, 2291335214732649733087887840226295]

[40, 772179967364902960050618202156261415]
[39, 295744927500757833699386771425848121945]
[38, 127466063752826626324435698484540540558295]
[37, 59526651772570034493511471192280432440723765]
[36, 36132677625950010937561463013714222491519325355]

[47, 23377842423989657076602266569873101952013003504685]
[46, 15967066375584935783319348067223328633224881393699855]
[45, 11192913529285039984106862995123553371890641856983598355]
[44, 9659484375772989506284222764791626559941623922576845380365]
[43, 8799790266329193440224926938725171796106819393467506141512515]

[45, 192505216135064215341]
[44, 52168913572602402357411]

[140, 5178171868551400590112457176767532175252154436358021137288677569657517]
[139, 10351165565234249779634801896358296818329056718279684253440066461745376483]
[138, 23673115647690729246024791936971424823518552714705637887617431998011676016621]
[137, 54708570261813275287563294166340962767151375323684729158283885347404983274411131]
[136, 148752602541870295506884596838281077763884589505098778581373884259594149523123865189]
[135, 408920904387601442348425756708434682772918736549516542320196807829624317039067505404561]
[134, 1528955261505241792940763904332837278887943155958642351735215864474965321409073402707653579]
[133, 6358924932600300616840637078120270242894955585631993540866762780351380771740336281861131235061]
[132, 30910734097370061298462336836742633650712379101757120602153333875288061931429774666126958933631521]
[131, 154522759752752936431013221846876425619911183129683845890164516042565021595217443555968667709223973479]

[59, 194602156386224629422552469787952346372498846530682289766253612669]

[73, 17753863742797993514807887275465088608480295]
[72, 7651915273145935204882199415725453190255007145]
[71, 3542836771466567999860458329480884827088068308135]
